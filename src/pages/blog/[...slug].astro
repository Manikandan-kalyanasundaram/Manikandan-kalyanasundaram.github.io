---
import Layout from "@/layouts/Layout.astro";
import { render } from "astro:content";
import { getCollection, getEntry, type CollectionEntry } from "astro:content";
import Toc from "@/components/toc.astro";
import BackToTop from "@/components/ui/BackToTop.astro";
import BackToPrev from "@/components/ui/BackToPrev.astro";
import { readingTime } from "@/lib/utils";
import FormattedDate from "@/components/ui/FormattedDate.astro";
export async function getStaticPaths() {
    const posts = await getCollection("blog");
    return posts.map((post: { id: any }) => ({
        params: { slug: post.id },
        props: { post },
    }));
}
interface Props {
    post: CollectionEntry<"blog">;
}
const { post } = Astro.props;
const entry = await getEntry("blog", post.id);

if (!entry) {
    return new Response("Not Found", {
        status: 404,
        statusText: "Not Found",
    });
}
const { Content, headings } = await render(entry);
---

<Layout title={entry.data.title} description={entry.data.description}>
    <BackToPrev href="/blog">Back to Blog</BackToPrev>
    <div class="my-2 mt-10">
        <FormattedDate date={entry.data.date} includeYear />
        <span class="text-black dark:text-amber-500">â€¢</span>
        <span>{entry.body && readingTime(entry.body)}</span>
    </div>
    <article class="animate">
        <Content />
        <BackToTop />
    </article>
    <Toc headings={headings} />
</Layout>

<!-- Highlight current heading -->
<script>
    function throttle<T extends (...args: any[]) => void>(func: T, limit: number): (...args: Parameters<T>) => void {
      let lastFunc: ReturnType<typeof setTimeout> | undefined;
      let lastRan: number | undefined;
    
      return function (this: ThisParameterType<T>, ...args: Parameters<T>) {
        const context = this;
        if (!lastRan) {
          func.apply(context, args);
          lastRan = Date.now();
        } else {
          clearTimeout(lastFunc);
          lastFunc = setTimeout(() => {
            if (Date.now() - (lastRan ?? 0) >= limit) {
              func.apply(context, args);
              lastRan = Date.now();
            }
          }, limit - (Date.now() - (lastRan ?? 0)));
        }
      };
    }
    
    function highlightTocActiveItem(): void {
      const headers = document.querySelectorAll("h1, h2, h3");
      const tocBannerElements = document.querySelectorAll(".toc-link");
    
      let firstMatch: string | null = null;
    
      headers.forEach((item) => {
        const rect = item.getBoundingClientRect();
        if (rect.top >= 0 && rect.top <= 200 && !firstMatch) {
          firstMatch = item.id;
        }
      });
    
      tocBannerElements.forEach((tocItem) => {
        if (!firstMatch || firstMatch === "table-of-contents") return;
        
        tocItem.classList.remove("toc-active");
        tocItem.setAttribute("data-toc-status", "");
    
        if (tocItem instanceof HTMLAnchorElement && tocItem.dataset.targetId === firstMatch) {
          tocItem.classList.add("toc-active");
          tocItem.setAttribute("data-toc-status", "active");
          tocItem.scrollIntoView({
            behavior: "smooth",
            block: "nearest",
          });
        }
      });
    }
    
    const throttledTocActiveItem = throttle(highlightTocActiveItem, 200);
    
    function setupTocScroll() {
      window.removeEventListener('scroll', throttledTocActiveItem);
      window.addEventListener('scroll', throttledTocActiveItem);
      highlightTocActiveItem();
    }
    
    document.addEventListener("astro:after-swap", setupTocScroll);
    document.addEventListener("DOMContentLoaded", setupTocScroll);
    </script>