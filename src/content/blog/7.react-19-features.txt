---
title: "React 19 features and problems"
description: "RC-19 was released a month and this time we got new things with actions and finally there are improvements to handle states in forms"
date: "Jan 22 2025"
draft: false
tags: ["Web",]
slug: "react-19-features-and-problems"
---

### What's New on React 19

After a while after released react-19 alpha react 19 was released on december 05, and this time we got some really cool new features, they are
- Improvement to forms and form state 
- Prewarm the suspense tree
- No need to forwardRef just pass ref like props
- async transistions aka Actions,(server actions in next.js)
- SSR improvements 

## Finally comes to forms

If you are a react developer you the pain of managing states in a complex form, there are actual form states then for each of them we have seperate error and loading states. reseting those states and react to them is a nigthmare for every react developer that why we got react-hook-form which make forms unsable in react but now with react 19's `useActionState`  and improvement to the `form`, `input` and `button` we can have actions directly which mean we no longer need a state but there is a caveat I'll come to that later, so first let's see how much simplified form handling is.

```tsx
'use client'

import { useActionState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { UsersInsertInput } from '@/__generated__/graphql'

export interface ActionResponse {
    success: boolean;
    message: string;
    errors?: {
      [K in keyof UsersInsertInput]?: string[];
    };
  }
  
const initialState: ActionResponse = {
  success: false,
  message: '',
}

export default function AddressForm() {
  const [state, action, isPending] = useActionState(()=>{}, initialState)

  return (
    <Card className="w-full max-w-lg mx-auto">
      <CardHeader>
        <CardTitle>Address Information</CardTitle>
        <CardDescription>Please enter your shipping address details below.</CardDescription>
      </CardHeader>
      <CardContent>
        <form action={action} className="space-y-6" autoComplete="on">
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="streetAddress">Street Address</Label>
              <Input
                id="streetAddress"
                name="streetAddress"
                placeholder="123 Main St"
                required
                minLength={5}
                maxLength={100}
                autoComplete="street-address"
                aria-describedby="streetAddress-error"
                className={state?.errors?.streetAddress ? 'border-red-500' : ''}
              />
              {state?.errors?.streetAddress && (
                <p id="streetAddress-error" className="text-sm text-red-500">
                  {state.errors.streetAddress[0]}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="apartment">Apartment/Suite (Optional)</Label>
              <Input
                id="apartment"
                name="apartment"
                placeholder="Apt 4B"
                maxLength={20}
                autoComplete="address-line2"
                aria-describedby="apartment-error"
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="city">City</Label>
                <Input
                  id="city"
                  name="city"
                  placeholder="New York"
                  required
                  minLength={2}
                  maxLength={50}
                  autoComplete="address-level2"
                  aria-describedby="city-error"
                  className={state?.errors?.city ? 'border-red-500' : ''}
                />
                {state?.errors?.city && (
                  <p id="city-error" className="text-sm text-red-500">
                    {state.errors.city[0]}
                  </p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="state">State</Label>
                <Input
                  id="state"
                  name="state"
                  placeholder="NY"
                  required
                  minLength={2}
                  maxLength={50}
                  autoComplete="address-level1"
                  aria-describedby="state-error"
                  className={state?.errors?.state ? 'border-red-500' : ''}
                />
                {state?.errors?.state && (
                  <p id="state-error" className="text-sm text-red-500">
                    {state.errors.state[0]}
                  </p>
                )}
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="zipCode">ZIP Code</Label>
                <Input
                  id="zipCode"
                  name="zipCode"
                  placeholder="10001"
                  required
                  pattern="[0-9]{5}(-[0-9]{4})?"
                  maxLength={10}
                  autoComplete="postal-code"
                  aria-describedby="zipCode-error"
                  className={state?.errors?.zipCode ? 'border-red-500' : ''}
                />
                {state?.errors?.zipCode && (
                  <p id="zipCode-error" className="text-sm text-red-500">
                    {state.errors.zipCode[0]}
                  </p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="country">Country</Label>
                <Input
                  id="country"
                  name="country"
                  placeholder="United States"
                  required
                  minLength={2}
                  maxLength={56}
                  autoComplete="country-name"
                  aria-describedby="country-error"
                  className={state?.errors?.country ? 'border-red-500' : ''}
                />
                {state?.errors?.country && (
                  <p id="country-error" className="text-sm text-red-500">
                    {state.errors.country[0]}
                  </p>
                )}
              </div>
            </div>
          </div>

          {state?.message && (
            <Alert variant={state.success ? "default" : "destructive"}>
              <AlertDescription>{state.message}</AlertDescription>
            </Alert>
          )}

          <Button 
            type="submit" 
            className="w-full"
            disabled={isPending}
          >
            {isPending ? 'Saving...' : 'Save Address'}
          </Button>
        </form>
      </CardContent>
    </Card>
  )
}
```
